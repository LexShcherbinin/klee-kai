import java.time.Duration

jacoco.toolVersion = '0.8.5'

nexusStaging {
    numberOfRetries = 500
}

java {
    withJavadocJar()
    withSourcesJar()
}

nexusPublishing {
    Duration duration = Duration.ofMinutes(5)
    connectTimeout = duration
    clientTimeout = duration

    repositories {
        sonatype {
            username = "${nexusUsername}"
            password = "${nexusPassword}"
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            group = project.group
            artifactId = 'klee-kai-api'
            version = project.version

            from components.java

            pom {
                name = project.name
                description = 'Project to ease pain of test automation'
                url = 'https://github.com/LexShcherbinin/klee-kai'
                inceptionYear = '2022'

                licenses {
                    license {
                        name = 'GNU General Public License v3.0'
                        url = 'https://www.gnu.org/licenses/gpl-3.0.en.html'
                        distribution = 'repo'
                    }
                }

                developers {
                    developer {
                        id = 'LexShcherbinin'
                        name = 'Alexandr Shcherbinin'
                        email = 'lexshcherbinin@gmail.com'
                    }
                }

                scm {
                    url = 'https://github.com/LexShcherbinin/klee-kai'
                    connection = 'scm:https://github.com/LexShcherbinin/klee-kai.git'
                    developerConnection = 'scm:https://github.com/LexShcherbinin/klee-kai.git'
                }
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

repositories {
    mavenCentral()
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 1.0
            }
        }
    }
}

dependencies {

    //Allure
    implementation "io.qameta.allure:allure-rest-assured:${allureVersion}"
    implementation "io.qameta.allure:allure-junit5:${allureVersion}"
    implementation "io.qameta.allure:allure-selenide:${allureVersion}"
    implementation "io.qameta.allure:allure-java-commons:${allureVersion}"

    //Config
    implementation "com.typesafe:config:${configVersion}"

    //REST Assured
    implementation "io.rest-assured:rest-assured:${restAssuredVersion}"
    implementation "io.rest-assured:json-path:${restAssuredVersion}"
    implementation "io.rest-assured:xml-path:${restAssuredVersion}"

    //AssertJ
    implementation "org.assertj:assertj-core:${assertjVersion}"

    //api
    implementation "org.awaitility:awaitility:4.2.0"

    implementation project(":klee-kai-common")

}